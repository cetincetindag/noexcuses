generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Frequency {
  ONCE
  DAILY
  WEEKLY
  MONTHLY
}

model User {
  clerkId           String      @id @unique
  databaseId        String      @unique @default(cuid())
  username          String      @unique
  settings          Json?
  tasks             Task[]     
  habits            Habit[]      
  categories        Category[] 
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @default(now()) @updatedAt
  lastLogin         DateTime?
  analyticsData     Json?       
  tutorialComplete  Boolean     @default(false)

  @@index([clerkId])
  @@index([databaseId])
}

model Task {
  id               String      @id @default(cuid())
  title            String
  description      String?
  priority         Int         @default(0)
  frequency        Frequency   @default(ONCE)
  completed        Boolean     @default(false)
  isCompletedToday Boolean     @default(false)  
  lastCompletedAt  DateTime?  
  dailyStreak      Int         @default(0)
  weeklyStreak     Int         @default(0)      
  monthlyStreak    Int         @default(0)      
  categoryId       String
  category         Category    @relation(fields: [categoryId], references: [id])
  userId           String
  user             User        @relation(fields: [userId], references: [clerkId])
  repeatConfig     Json?       
  nextDueDate      DateTime?   
  isRecurring      Boolean     @default(false)
  dueDate          DateTime?   
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @default(now()) @updatedAt

  @@index([userId])
  @@index([categoryId])
}

model Habit {
  id               String      @id @default(cuid())
  title            String
  description      String?
  targetCompletions Int        @default(1)    
  completedToday   Int         @default(0)    
  isCompletedToday Boolean     @default(false)
  active           Boolean     @default(true)
  dailyStreak      Int         @default(0)    
  longestStreak    Int         @default(0)    
  categoryId       String
  category         Category    @relation(fields: [categoryId], references: [id])
  userId           String
  user             User        @relation(fields: [userId], references: [clerkId])
  lastCompletedAt  DateTime?
  order            Int         @default(0)
  color            String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @default(now()) @updatedAt

  @@index([userId])
  @@index([categoryId])
}

model Category {
  id          String      @id @default(cuid())
  name        String
  color       String
  icon        String
  description String?
  priority    Int          @default(0)
  tasks       Task[]
  habits      Habit[]     
  userId      String
  user        User         @relation(fields: [userId], references: [clerkId])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt

  @@index([userId])
}
